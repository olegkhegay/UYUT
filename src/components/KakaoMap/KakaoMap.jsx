import React, { useEffect, useRef, useState } from 'react'
import s from './KakaoMap.module.scss'

const KakaoMap = ({ onLocationSelect, selectedAddress }) => {
  const mapContainer = useRef(null)
  const [map, setMap] = useState(null)
  const [marker, setMarker] = useState(null)
  const [currentLocation, setCurrentLocation] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)
  const [isDemoMode, setIsDemoMode] = useState(false)

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Kakao Maps API
    if (!window.kakao || !window.kakao.maps) {
      console.warn('Kakao Maps API –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º')
      setIsDemoMode(true)
      return
    }

    window.kakao.maps.load(() => {
      initializeMap()
    })
  }, [])

  const initializeMap = () => {
    const options = {
      center: new window.kakao.maps.LatLng(37.5665, 126.9780), // –°–µ—É–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      level: 3
    }

    const kakaoMap = new window.kakao.maps.Map(mapContainer.current, options)
    setMap(kakaoMap)

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
    const mapMarker = new window.kakao.maps.Marker({
      position: options.center,
      map: kakaoMap
    })
    setMarker(mapMarker)

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
    window.kakao.maps.event.addListener(kakaoMap, 'click', (mouseEvent) => {
      const latlng = mouseEvent.latLng
      
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º–∞—Ä–∫–µ—Ä
      mapMarker.setPosition(latlng)
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
      getAddressFromCoords(latlng)
    })

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    getCurrentLocation()
  }

  const getCurrentLocation = () => {
    setIsLoading(true)
    setError(null)

    if (isDemoMode) {
      // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setTimeout(() => {
        const demoLocation = {
          address: '–°–µ—É–ª, –ö–∞–Ω–≥-–Ω–∞–º, —É–ª. –¢—ç—Ö–µ—Ä–∞–Ω-–Ω–æ, 123',
          lat: 37.5665,
          lng: 126.9780
        }
        setCurrentLocation(demoLocation)
        if (onLocationSelect) {
          onLocationSelect(demoLocation)
        }
        setIsLoading(false)
      }, 1000)
      return
    }

    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const lat = position.coords.latitude
          const lng = position.coords.longitude
          const coords = new window.kakao.maps.LatLng(lat, lng)
          
          setCurrentLocation({ lat, lng })
          
          if (map && marker) {
            map.setCenter(coords)
            marker.setPosition(coords)
            getAddressFromCoords(coords)
          }
          
          setIsLoading(false)
        },
        (error) => {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error)
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
          setIsLoading(false)
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 0
        }
      )
    } else {
      setError('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º')
      setIsLoading(false)
    }
  }

  const getAddressFromCoords = (coords) => {
    if (isDemoMode) return

    const geocoder = new window.kakao.maps.services.Geocoder()
    
    geocoder.coord2Address(coords.getLng(), coords.getLat(), (result, status) => {
      if (status === window.kakao.maps.services.Status.OK) {
        const address = result[0].address
        const fullAddress = address.address_name
        
        if (onLocationSelect) {
          onLocationSelect({
            address: fullAddress,
            lat: coords.getLat(),
            lng: coords.getLng()
          })
        }
      }
    })
  }

  const handleMyLocationClick = () => {
    getCurrentLocation()
  }

  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ - –∫–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  const handleDemoMapClick = (event) => {
    if (!isDemoMode) return

    const rect = event.currentTarget.getBoundingClientRect()
    const x = event.clientX - rect.left
    const y = event.clientY - rect.top
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∏–∫ –≤ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const centerLat = 37.5665
    const centerLng = 126.9780
    const mapWidth = rect.width
    const mapHeight = rect.height
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
    const offsetX = (x - mapWidth / 2) / mapWidth * 0.02 // –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
    const offsetY = (mapHeight / 2 - y) / mapHeight * 0.02 // –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
    
    const newLat = centerLat + offsetY
    const newLng = centerLng + offsetX
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π)
    const demoAddresses = [
      `–°–µ—É–ª, –ö–∞–Ω–≥-–Ω–∞–º, —É–ª. –¢—ç—Ö–µ—Ä–∞–Ω-–Ω–æ, ${Math.floor(Math.random() * 999) + 1}`,
      `–°–µ—É–ª, –ò—Ç—ç–≤–æ–Ω, —É–ª. –ò—Ç—ç–≤–æ–Ω-–Ω–æ, ${Math.floor(Math.random() * 999) + 1}`,
      `–°–µ—É–ª, –ú—å–æ–Ω–≥-–¥–æ–Ω, —É–ª. –ú—å–æ–Ω–≥-–¥–æ–Ω-–≥–∏–ª—å, ${Math.floor(Math.random() * 999) + 1}`,
      `–°–µ—É–ª, –•–æ–Ω–≥-–¥—ç, —É–ª. –•–æ–Ω–≥-–∏–∫-–Ω–æ, ${Math.floor(Math.random() * 999) + 1}`,
      `–°–µ—É–ª, –ö–∞–Ω–Ω–∞–º-–≥—É, —É–ª. –ê–ø–≥—É–¥–∂–æ–Ω-–Ω–æ, ${Math.floor(Math.random() * 999) + 1}`,
      `–°–µ—É–ª, –ß—É–Ω-–≥—É, —É–ª. –ß–æ–Ω–≥-–Ω–æ, ${Math.floor(Math.random() * 999) + 1}`
    ]

    const selectedAddress = demoAddresses[Math.floor(Math.random() * demoAddresses.length)]
    
    const demoLocation = {
      address: selectedAddress,
      lat: newLat,
      lng: newLng
    }

    if (onLocationSelect) {
      onLocationSelect(demoLocation)
    }
  }

  if (isDemoMode) {
    return (
      <div className={s.kakaoMap}>
        <div className={s.kakaoMap__container}>
          <div 
            className={s.kakaoMap__demoMap}
            onClick={handleDemoMapClick}
          >
            <div className={s.kakaoMap__demoContent}>
              <div className={s.kakaoMap__demoIcon}>üó∫Ô∏è</div>
              <div className={s.kakaoMap__demoText}>
                –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞
              </div>
              <div className={s.kakaoMap__demoSubtext}>
                –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
              </div>
            </div>
            
            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä, –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –≤—ã–±—Ä–∞–Ω */}
            {selectedAddress && (
              <div className={s.kakaoMap__demoMarker}>üìç</div>
            )}
          </div>
          
          <button 
            className={s.kakaoMap__myLocationBtn}
            onClick={handleMyLocationClick}
            disabled={isLoading}
            title="–ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
          >
            {isLoading ? (
              <div className={s.kakaoMap__spinner} />
            ) : (
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                <path d="M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm8.94 3A8.994 8.994 0 0 0 13 3.06V1h-2v2.06A8.994 8.994 0 0 0 3.06 11H1v2h2.06A8.994 8.994 0 0 0 11 20.94V23h2v-2.06A8.994 8.994 0 0 0 20.94 13H23v-2h-2.06zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z" fill="currentColor"/>
              </svg>
            )}
          </button>
        </div>
        
        {selectedAddress && (
          <div className={s.kakaoMap__selectedAddress}>
            <div className={s.kakaoMap__addressLabel}>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</div>
            <div className={s.kakaoMap__addressText}>{selectedAddress}</div>
          </div>
        )}
      </div>
    )
  }

  return (
    <div className={s.kakaoMap}>
      <div className={s.kakaoMap__container}>
        <div 
          ref={mapContainer} 
          className={s.kakaoMap__map}
        />
        
        <button 
          className={s.kakaoMap__myLocationBtn}
          onClick={handleMyLocationClick}
          disabled={isLoading}
          title="–ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
        >
          {isLoading ? (
            <div className={s.kakaoMap__spinner} />
          ) : (
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
              <path d="M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm8.94 3A8.994 8.994 0 0 0 13 3.06V1h-2v2.06A8.994 8.994 0 0 0 3.06 11H1v2h2.06A8.994 8.994 0 0 0 11 20.94V23h2v-2.06A8.994 8.994 0 0 0 20.94 13H23v-2h-2.06zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z" fill="currentColor"/>
            </svg>
          )}
        </button>
        
        {error && (
          <div className={s.kakaoMap__error}>
            {error}
          </div>
        )}
      </div>
      
      {selectedAddress && (
        <div className={s.kakaoMap__selectedAddress}>
          <div className={s.kakaoMap__addressLabel}>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</div>
          <div className={s.kakaoMap__addressText}>{selectedAddress}</div>
        </div>
      )}
    </div>
  )
}

export default KakaoMap 