import React, { useState, useEffect, useRef, useImperativeHandle, forwardRef, useMemo, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import s from './DishList.module.scss'
import DishCard from '../DishCard/DishCard'
import DishDetailModal from '../DishDetailModal/DishDetailModal'
import useMenuStore from '../../stores/menuStore'
import { API_TYPES } from '../../api/types'
import menuData from '../../data/menu.json'

const DishList = forwardRef(({ 
  activeCategory = '–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏', 
  searchQuery = '', 
  onCategoryChange,
  onSetClick,
  onAllDishesLoad
}, ref) => {
  const [filteredDishes, setFilteredDishes] = useState([])
  const [selectedDish, setSelectedDish] = useState(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const categoryRefs = useRef({})

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º MenuStore
  const { 
    categories,
    dishes,
    loading,
    errors,
    searchDishes,
    getDishesByCategory,
    currentCategory 
  } = useMenuStore()

  // –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ store
  useEffect(() => {
    console.log('üîÑ DishList: Store data received:')
    console.log('üìä DishList: categories:', categories)
    console.log('üìä DishList: categories length:', categories?.length || 0)
    console.log('üìä DishList: dishes:', dishes)
    console.log('üìä DishList: dishes length:', dishes?.length || 0)
    console.log('üìä DishList: loading:', loading)
    console.log('üìä DishList: errors:', errors)
  }, [categories, dishes, loading, errors])

  // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º
  const fallbackDishes = useMemo(() => 
    dishes.length > 0 ? dishes : menuData.dishes, 
    [dishes]
  )

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–ª—é–¥–∞ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤–∫–ª—é—á–∞—è —Å–µ—Ç—ã) - –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º
  const allDishes = useMemo(() => {
    console.log('üîÑ DishList: Processing categories:', categories)
    
    const dishes = categories.reduce((acc, category) => {
      if (category.menuItems && category.menuItems.length > 0) {
        const categoryDishes = category.menuItems.map(dish => ({
          ...dish,
          categoryName: category.name,
          categoryId: category.id
        }))
        console.log(`üì¶ DishList: Category "${category.name}" has ${categoryDishes.length} dishes`)
        return [...acc, ...categoryDishes]
      }
      return acc
    }, [])
    
    console.log(`‚úÖ DishList: Total dishes from categories: ${dishes.length}`)
    return dishes
  }, [categories])

  // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –±–ª—é–¥–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ SetDetailModal
  useEffect(() => {
    if (onAllDishesLoad && allDishes.length > 0) {
      onAllDishesLoad(allDishes)
    }
  }, [allDishes, onAllDishesLoad])

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
  const performSearch = useCallback(async (query) => {
    if (!query.trim()) {
      setFilteredDishes([])
      return
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –∏–∑ store
      const results = await searchDishes(query)
      setFilteredDishes(results)
    } catch (error) {
      console.warn('API search failed, using local search:', error)
      // Fallback –ø–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º (–≤–∫–ª—é—á–∞—è —Å–µ—Ç—ã)
      const filtered = allDishes.filter(dish => 
        dish.name.toLowerCase().includes(query.toLowerCase()) ||
        dish.description.toLowerCase().includes(query.toLowerCase()) ||
        (dish.categoryName || dish.category || '').toLowerCase().includes(query.toLowerCase())
      )
      setFilteredDishes(filtered)
    }
  }, [searchDishes, allDishes])

  useEffect(() => {
    performSearch(searchQuery)
  }, [searchQuery, performSearch])

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º - –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º
  const groupedDishes = useMemo(() => {
    console.log('üîÑ DishList: Grouping dishes by categories')
    
    if (categories.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–∞–Ω–Ω—ã–µ
      const grouped = categories.reduce((acc, category) => {
        if (category.menuItems && category.menuItems.length > 0) {
          acc[category.name] = category.menuItems.map(dish => ({
            ...dish,
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            category: category.name,
            categoryName: category.name,
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            displayPrice: API_TYPES.formatPrice(dish.price)
          }))
          console.log(`üì¶ DishList: Grouped ${acc[category.name].length} dishes for category "${category.name}"`)
        }
        return acc
      }, {})
      
      console.log('‚úÖ DishList: Grouped dishes:', Object.keys(grouped))
      return grouped
    } else {
      // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
      console.log('üîÑ DishList: Using fallback local data')
      return menuData.dishes.reduce((acc, dish) => {
        const categoryName = menuData.categories.find(cat => cat.id === dish.category)?.name || '–î—Ä—É–≥–æ–µ'
        if (!acc[categoryName]) {
          acc[categoryName] = []
        }
        acc[categoryName].push({
          ...dish,
          displayPrice: dish.price,
          categoryName
        })
        return acc
      }, {})
    }
  }, [categories])

  const scrollToCategory = (categoryName) => {
    if (categoryName === '–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏') {
      // –°–∫—Ä–æ–ª–ª –∫ –Ω–∞—á–∞–ª—É —Å–ø–∏—Å–∫–∞
      window.scrollTo({ top: 0, behavior: 'smooth' })
    } else if (categoryRefs.current[categoryName]) {
      const element = categoryRefs.current[categoryName]
      const elementPosition = element.offsetTop
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ categories –≤ sticky —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      const searchElement = document.querySelector('[class*="home__search"]')
      const searchBottom = searchElement ? searchElement.offsetTop + searchElement.offsetHeight : 0
      const isSticky = window.pageYOffset >= searchBottom
      
      const offsetPosition = elementPosition - (isSticky ? 80 : 20)
      
      window.scrollTo({ 
        top: offsetPosition, 
        behavior: 'smooth' 
      })
    }
  }

  const handleCardClick = (dish) => {
    setSelectedDish(dish)
    setIsModalOpen(true)
  }

  const handleModalClose = () => {
    setIsModalOpen(false)
    setSelectedDish(null)
  }

  useImperativeHandle(ref, () => ({
    scrollToCategory
  }))

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (errors.categories) {
    return (
      <div className={s.dishList}>
        <div className={s.dishList__error}>
          <div className={s.dishList__errorIcon}>‚ö†Ô∏è</div>
          <h3 className={s.dishList__errorTitle}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é</h3>
          <p className={s.dishList__errorText}>{errors.categories}</p>
          <button 
            onClick={() => window.location.reload()} 
            className={s.dishList__errorButton}
          >
            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
        </div>
      </div>
    )
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (loading.categories && categories.length === 0) {
    return (
      <div className={s.dishList}>
        <div className={s.dishList__loading}>
          <div className={s.dishList__loadingIcon}>üîÑ</div>
          <h3 className={s.dishList__loadingTitle}>–ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é...</h3>
          <p className={s.dishList__loadingText}>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
        </div>
      </div>
    )
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
  if (searchQuery.trim()) {
    return (
      <div className={s.dishList}>
        <motion.div 
          className={s.dishList__searchResults}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          <div className={s.dishList__searchHeader}>
            <h2 className={s.dishList__searchTitle}>
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "{searchQuery}"
            </h2>
            <span className={s.dishList__searchCount}>
              {loading.search ? '–ü–æ–∏—Å–∫...' : `${filteredDishes.length} ${filteredDishes.length === 1 ? '—Ä–µ–∑—É–ª—å—Ç–∞—Ç' : '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'}`}
            </span>
          </div>
          
          <AnimatePresence mode="wait">
            {filteredDishes.length > 0 ? (
              <motion.div 
                className={s.dishList__grid}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.3 }}
              >
                {filteredDishes.map((dish, index) => (
                  <motion.div
                    key={dish.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                  >
                    <DishCard 
                      dish={dish} 
                      onCardClick={handleCardClick}
                      onSetClick={onSetClick}
                    />
                  </motion.div>
                ))}
              </motion.div>
            ) : (
              <motion.div 
                className={s.dishList__noResults}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                transition={{ duration: 0.3 }}
              >
                <div className={s.dishList__noResultsIcon}>üîç</div>
                <h3 className={s.dishList__noResultsTitle}>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                <p className={s.dishList__noResultsText}>
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                </p>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
        
        <DishDetailModal
          dish={selectedDish}
          isOpen={isModalOpen}
          onClose={handleModalClose}
          allDishes={fallbackDishes}
          onOpenModal={handleCardClick}
        />
      </div>
    )
  }

  // –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  return (
    <>
      <div className={s.dishList}>
        {Object.entries(groupedDishes).length > 0 ? (
          Object.entries(groupedDishes).map(([category, categoryDishes]) => (
            <div key={category} className={s.dishList__category}>
              <h2 
                className={s.dishList__categoryTitle}
                ref={el => categoryRefs.current[category] = el}
              >
                {category}
              </h2>
              <div className={s.dishList__grid}>
                {categoryDishes.map(dish => (
                  <DishCard 
                    key={dish.id} 
                    dish={dish} 
                    onCardClick={handleCardClick}
                    onSetClick={onSetClick}
                  />
                ))}
              </div>
            </div>
          ))
        ) : (
          <div className={s.dishList__empty}>
            <div className={s.dishList__emptyIcon}>üçΩÔ∏è</div>
            <h3 className={s.dishList__emptyTitle}>–ú–µ–Ω—é –ø—É—Å—Ç–æ</h3>
            <p className={s.dishList__emptyText}>
              {loading.categories ? '–ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é...' : '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
            </p>
            {!loading.categories && (
              <button 
                onClick={() => window.location.reload()} 
                className={s.dishList__emptyButton}
              >
                –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
              </button>
            )}
          </div>
        )}
      </div>
      
      <DishDetailModal
        dish={selectedDish}
        isOpen={isModalOpen}
        onClose={handleModalClose}
        allDishes={fallbackDishes}
        onOpenModal={handleCardClick}
      />
    </>
  )
})

export default DishList 